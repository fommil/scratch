package quickcheck

import common._

import org.scalacheck._
import Arbitrary._
import Gen._
import Prop._

abstract class QuickCheckHeap extends Properties("Heap") with IntHeap {

  /*
   * As an example of what you should do, here is a property that ensures that if you insert an
   * element into an empty heap, then find the minimum of the resulting heap, you get the element back
   */
  property("min1") = forAll { a: Int =>
    val h = insert(a, empty)
    findMin(h) == a
  }

  /*
   * We also recommend you write a generator of heaps, of abstract type H, so that you can write
   * properties on any random heap, generated by your procedure. For example,
   */
  property("gen1") = forAll { (h: H) =>
    val m = if (isEmpty(h)) 0 else findMin(h)
    findMin(insert(m, h))==m
  }

  /*
   * To get you in shape, here is an example of a generator for maps of type Map[Int,Int].
   */
  lazy val genMap: Gen[Map[Int,Int]] = for {
    k <- arbitrary[Int]
    v <- arbitrary[Int]
    m <- oneOf(value(Map.empty[Int,Int]), genMap)
  } yield m.updated(k, v)

  lazy val genHeap: Gen[H] = ???

  implicit lazy val arbHeap: Arbitrary[H] = Arbitrary(genHeap)

  /* HINTS
   *
   * 1. If you insert any two elements into an empty heap, finding the minimum of the resulting heap should get the smallest of the two elements back.
   * 2. If you insert an element into an empty heap, then delete the minimum, the resulting heap should be empty.
   * 3. Given any heap, you should get a sorted sequence of elements when continually finding and deleting minima. (Hint: recursion and helper functions are your friends.)
   * 4. Finding a minimum of the melding of any two heaps should return a minimum of one or the other.
   */

}
